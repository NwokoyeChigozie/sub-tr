
# FILE TO BE UPDATED

File Path: `/src/index.js`
```

const Logfmt = require('logfmt')
const chalk = require('chalk')
const destroyCircular = require('destroy-circular')
const flatten = require('flat')

/**
 * Environment variables, with a client-side guard.
 *
 * @type {String}
 */

const LOG_LEVEL = typeof process != 'undefined' && process.env.LOG_LEVEL
const NODE_ENV = typeof process != 'undefined' && process.env.NODE_ENV

/**
 * Logfmt helper.
 *
 * @type {Logfmt}
 */

const logfmt = new Logfmt()

/**
 * Log levels.
 *
 * @type {Object}
 */

const LEVELS = {
  debug: 1,
  info: 2,
  warn: 3,
  error: 4,
}

/**
 * Log level colors.
 *
 * @type {Object}
 */

const COLORS = {
  debug: chalk.gray,
  info: chalk.blue,
  warn: chalk.yellow,
  error: chalk.red,
}

/**
 * Define the `Logger` class.
 *
 * @type {Logger}
 */

class Logger {

  /**
   * Constructor.
   *
   * @param {Object} options
   */

  constructor(options = {}) {
    let {
      color = (NODE_ENV != 'production'),
      delimiter = '#',
      level = (LOG_LEVEL || 'info'),
      prefix = '',
      readable = (NODE_ENV != 'production'),
    } = options

    if (typeof level != 'string') {
      level = 'none'
    }

    level = level.toLowerCase()

    if (!(level in LEVELS)) {
      level = 'none'
    }

    if (typeof prefix != 'string') {
      prefix = String(prefix)
    }

    this.config = {
      color: !!color,
      delimiter,
      level,
      prefix,
      readable: !!readable,
      threshold: level == 'none' ? Infinity : LEVELS[level],
    }

    for (const key in LEVELS) {
      this[key] = (message, data) => this.log(key, message, data)
    }
  }

  /**
   * Log to the console with `level`, `message` and `data`.
   *
   * @param {String} level
   * @param {String} message
   * @param {Object} data
   */

  log(level, message, data) {
    if (typeof level != 'string') {
      level = 'info'
    }

    level = level.toLowerCase()

    if (!(level in LEVELS)) {
      level = 'info'
    }

    if (typeof data != 'object') {
      data = {}
    }

    if (message instanceof Error) {
      data.error = message
      data.stack = message.stack
      message = message.message
    }

    if (typeof message != 'string') {
      message = String(message)
    }

    const { threshold, prefix } = this.config
    const value = LEVELS[level]
    if (value < threshold) return

    const output = this.format(level, prefix + message, data)
    console.log(output) // eslint-disable-line no-console
  }

  /**
   * Format a log with `level`, `message` and `data`.
   *
   * @param {String} level
   * @param {String} message
   * @param {Object} data
   */

  /**
 * Generate a `format` function that formats log messages based on the provided
 * log level, message, and data. The function should support custom formatting 
 * options, including whether to use colors, whether the output should be human-readable, 
 * and the delimiter used for separating fields in the log output.
 * 
 * The function will use the `logfmt`, `chalk`, `destroyCircular`, and `flatten` libraries.
 * Consider different logging levels (e.g., debug, info, warn, error) and 
 * handle circular references in the log data.
 * 
 * The formatted log should include the log level, message, and additional data 
 * in a structured format, and return a string that represents the log message.
 * 
 * If the environment variable `NODE_ENV` is set to 'production', the output should be 
 * minimal and optimized for machines. Otherwise, it should be more readable and 
 * possibly include color formatting.
 * 
 * The return format should look like this:
 * - In production: `key1=value1 key2=value2 level=info message="Your message here"`
 * - In non-production: `[level] Your message here key1=value1 key2=value2`
 */
 $PlaceHolder$;

  /**
   * Create a new logger, extending the current logger's config.
   *
   * @param {Object} options
   * @return {Logger}
   */

  clone(options = {}) {
    return new Logger({
      ...this.config,
      ...options,
    })
  }

}

/**
 * Create a logger singleton with sane defaults.
 *
 * @type {Logger}
 */

const logger = new Logger()

/**
 * Export.
 *
 * @type {Logger}
 */

module.exports = exports = logger
exports.Logger = Logger

```

format(level, message, data) {
    const { color, readable, delimiter } = this.config;

    if (NODE_ENV === "production") {
      data = destroyCircular(data);
      data = flatten(data);
      data.level = level;
      data.message = message;
      return logfmt.stringify(data);
    } else {
      const output = [];
      output.push(
        color
          ? COLORS[level](`[${level.toUpperCase()}]`)
          : `[${level.toUpperCase()}]`
      );
      output.push(message);

      data = destroyCircular(data);
      data = flatten(data);
      if (Object.keys(data).length) output.push(logfmt.stringify(data));

      return output.join(" " + delimiter + " ");
    }
  }